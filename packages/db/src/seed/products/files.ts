import { createId } from "@paralleldrive/cuid2";
import { files } from "../../schemas/file";
import { productFiles } from "../../schemas/products";
import { uploadImageToS3 } from "./images";

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
 */
export async function createProductFile(
  tx: any,
  productId: string,
  productXmlId: string,
  productName: string,
  imagePath: string,
  index: number,
  adminId: string
) {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3
    const fileInfo = await uploadImageToS3(
      imagePath,
      productXmlId,
      index,
    );

    if (!fileInfo) {
      console.warn(
        `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imagePath} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${productXmlId}`,
      );
      return null;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ –≤ –ë–î
    const [fileRecord] = await tx
      .insert(files)
      .values({
        id: fileInfo.fileId,
        name: fileInfo.name,
        mimeType: fileInfo.mimeType,
        size: fileInfo.size,
        path: fileInfo.url,
        type: "product_image",
        uploadedBy: adminId,
      })
      .returning();

    if (!fileRecord) {
      console.warn(
        `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${productXmlId}`,
      );
      return null;
    }

    // –°–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
    await tx.insert(productFiles).values({
      id: createId(),
      productId: productId,
      fileId: fileRecord.id,
      type: index === 0 ? "main" : "gallery", // –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –≥–ª–∞–≤–Ω–æ–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –≥–∞–ª–µ—Ä–µ—è
      order: index,
      url: fileInfo.url,
      alt: productName,
    });

    console.log(
      `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${productName}`,
    );

    return fileRecord;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${errorMessage}`);
    return null;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –ø—É—Ç–µ–π
 */
export async function processProductImages(
  tx: any,
  productId: string,
  productXmlId: string,
  productName: string,
  images: string[],
  adminId: string
) {
  if (!images || !Array.isArray(images) || images.length === 0) {
    return [];
  }

  console.log(
    `üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${productName}`,
  );

  const createdFiles = [];

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3 –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î
  for (let i = 0; i < images.length; i++) {
    const imagePath = images[i];

    if (!imagePath) {
      console.warn(
        `‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${productXmlId}`,
      );
      continue;
    }

    const fileRecord = await createProductFile(
      tx,
      productId,
      productXmlId,
      productName,
      imagePath,
      i,
      adminId
    );

    if (fileRecord) {
      createdFiles.push(fileRecord);
    }
  }

  return createdFiles;
}
