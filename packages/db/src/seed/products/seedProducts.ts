import { generateAttributes, processProduct } from "./product-helpers";
import { getBrandNameToId } from "./brand-utils";
import { getCategoryXmlIdToId } from "./category-utils";
import fs from "node:fs/promises";
import path from "node:path";
import type { ProductData } from "./types";

const productsJsonPaths = [
	path.resolve(__dirname, "./output.json"),
	path.resolve(__dirname, "./output-man.json"),
	path.resolve(__dirname, "./output-woman.json"),
	path.resolve(__dirname, "./output-kids.json"),
];

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤
 */
export async function seedProducts(): Promise<void> {
	console.log("üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤...");
	let allProducts: ProductData[] = [];
	for (const jsonPath of productsJsonPaths) {
		try {
			const rawData = await fs.readFile(jsonPath, "utf-8");
			const productsData: ProductData[] = JSON.parse(rawData);
			console.log(
				`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${productsData.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ ${path.basename(jsonPath)}`,
			);
			allProducts = [...allProducts, ...productsData];
		} catch (err) {
			console.warn(
				`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ${jsonPath}: ${err instanceof Error ? err.message : String(err)}`,
			);
		}
	}
	if (allProducts.length === 0) {
		console.log("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É");
		return;
	}
	const brandNameToId = await getBrandNameToId();
	const xmlIdToCategoryId = await getCategoryXmlIdToId();
	let successCount = 0;
	let errorCount = 0;
	for (const product of allProducts) {
		try {
			const preparedProduct = generateAttributes(product);
			await processProduct(preparedProduct, brandNameToId, xmlIdToCategoryId);
			successCount++;
		} catch (error) {
			console.log(error);
			const errorMessage =
				error instanceof Error ? error.message : String(error);
			console.error(
				`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.name}: ${errorMessage}`,
			);
			errorCount++;
		}
	}
	console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${successCount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
	if (errorCount > 0) {
		console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ${errorCount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
	}
	console.log("‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
}
