# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json
language: "ru-RU"
early_access: true
reviews:
  profile: "chill"
  request_changes_workflow: true
  high_level_summary: true
  poem: false
  review_status: true
  collapse_walkthrough: true
  auto_review:
    enabled: true
    drafts: false
  path_instructions:
    - path: "**/*.ts"
      instructions: |
        ОСНОВНЫЕ ПРИНЦИПЫ РАЗРАБОТКИ:

        1. Именование и стиль кода:
           - Имена файлов обязательно в kebab-case (например: my-component.ts, user-profile.tsx)
           - Функции в camelCase, компоненты в PascalCase, константы в UPPER_SNAKE_CASE
           - Имена переменных и функций должны четко отражать их назначение и реализацию
           - Избегайте сокращений и аббревиатур в именах (кроме общепринятых)
           - Поддерживайте консистентность в стиле кода (отступы, пробелы, переносы строк)
           - Следуйте принципам чистого кода (DRY, SOLID, KISS)
           - Используйте осмысленные имена для булевых переменных (isLoading, hasPermission, canEdit)

        2. TypeScript и типизация:
           - Используйте строгую типизацию и избегайте any, unknown и {} где это возможно
           - Правильно применяйте дженерики, интерфейсы и типы
           - Обеспечивайте корректные определения типов для параметров функций и возвращаемых значений
           - Предпочитайте union и intersection типы сложным условным конструкциям
           - Используйте утилитарные типы TypeScript (Pick, Omit, Partial, Required)
           - Создавайте переиспользуемые типы и интерфейсы
           - Избегайте дублирования типов, выносите общие типы в отдельные файлы

        3. Соблюдение правил линтера:
           - Следуйте правилам ESLint для React и TypeScript
           - Соблюдайте рекомендации Biome по форматированию и анализу кода
           - Убедитесь, что код не содержит предупреждений или ошибок линтера
           - Используйте автоматическое форматирование кода

        4. Алгоритмы и производительность:
           - Пишите понятные и читаемые алгоритмы, которые могут понять другие разработчики
           - Оптимизируйте сложность алгоритмов (временную и пространственную)
           - Избегайте чрезмерной вложенности и сложности
           - Правильно обрабатывайте граничные случаи и ошибки
           - Используйте подходящие структуры данных для задач
           - Применяйте мемоизацию где это уместно

        5. Безопасность и стабильность:
           - Реализуйте правильную валидацию входных данных и защиту от инъекций
           - Корректно обрабатывайте ошибки и исключения
           - Обеспечивайте безопасное хранение и передачу конфиденциальных данных
           - Используйте типобезопасные методы работы с данными
           - Избегайте потенциальных уязвимостей безопасности

        6. Архитектура и структура:
           - Следуйте принципам модульности и разделения ответственности
           - Создавайте переиспользуемые утилиты и функции
           - Правильно организуйте импорты и экспорты
           - Используйте паттерны проектирования где это уместно
           - Избегайте циклических зависимостей

        7. Документация и комментарии:
           - Пишите осмысленные комментарии для сложной логики
           - Документируйте публичные API и интерфейсы
           - Используйте JSDoc для документирования функций
           - Убедитесь, что все комментарии актуальны и полезны

        8. Пользовательский контент:
           - Убедитесь, что весь текст и сообщения грамматически корректны
           - Поддерживайте содержание релевантным заданной теме
           - Сохраняйте логическую связность и последовательность
           - Устраняйте опечатки и стилистические ошибки
           - Пишите ясные и доступные сообщения для пользователей

    - path: "**/*.tsx"
      instructions: |
        ПРИНЦИПЫ РАЗРАБОТКИ REACT КОМПОНЕНТОВ:

        1. Именование и стиль кода:
           - Имена файлов обязательно в kebab-case (например: my-component.tsx, user-profile.tsx)
           - Компоненты в PascalCase, функции в camelCase, константы в UPPER_SNAKE_CASE
           - Имена компонентов должны четко отражать их назначение и функциональность
           - Избегайте сокращений в именах компонентов
           - Поддерживайте консистентность в стиле кода
           - Следуйте принципам чистого кода (DRY, SOLID, KISS)

        2. TypeScript и типизация:
           - Используйте строгую типизацию для всех пропсов компонентов
           - Избегайте any, unknown и {} где это возможно
           - Правильно типизируйте события и колбэки
           - Используйте дженерики для переиспользуемых компонентов
           - Создавайте интерфейсы для пропсов компонентов
           - Типизируйте состояние компонентов
           - Используйте утилитарные типы React (ComponentProps, PropsWithChildren, etc.)

        3. React и Next.js лучшие практики:
           - Оптимизируйте React компоненты (используйте мемоизацию, поддерживайте правильную структуру)
           - Правильно используйте хуки (useEffect, useState, useCallback, useMemo)
           - Предотвращайте утечки памяти в useEffect
           - Корректно реализуйте серверные и клиентские компоненты в Next.js
           - Оптимизируйте стратегии маршрутизации и загрузки данных (SSR, SSG, ISR)
           - Используйте React.memo для предотвращения ненужных ре-рендеров
           - Правильно управляйте зависимостями в useEffect
           - Избегайте создания объектов и функций в рендере

        4. Производительность компонентов:
           - Оптимизируйте рендеринг списков с помощью виртуализации при необходимости
           - Используйте lazy loading для компонентов
           - Минимизируйте количество ре-рендеров
           - Правильно используйте key пропы в списках
           - Избегайте встроенных объектов и функций в JSX
           - Используйте Code Splitting для больших компонентов

        5. Управление состоянием:
           - Поднимайте состояние только когда это необходимо
           - Используйте локальное состояние где это возможно
           - Правильно структурируйте состояние компонентов
           - Избегайте дублирования состояния
           - Используйте редьюсеры для сложного состояния

        6. Доступность (Accessibility):
           - Используйте семантические HTML элементы
           - Добавляйте aria-атрибуты где необходимо
           - Обеспечивайте навигацию с клавиатуры
           - Поддерживайте screen readers
           - Используйте правильные цветовые контрасты

        7. Соблюдение правил линтера:
           - Следуйте правилам ESLint для React и TypeScript
           - Соблюдайте рекомендации Biome по форматированию
           - Используйте правила React Hooks
           - Убедитесь, что код не содержит предупреждений линтера

        8. Обработка ошибок:
           - Используйте Error Boundaries для обработки ошибок
           - Правильно обрабатывайте асинхронные операции
           - Показывайте понятные сообщения об ошибках пользователю
           - Логируйте ошибки для отладки

        9. Тестирование:
           - Пишите компоненты, которые легко тестировать
           - Избегайте тесной связи с внешними зависимостями
           - Используйте data-testid для тестирования
           - Следуйте принципам Testing Library

        10. Безопасность и стабильность:
            - Реализуйте правильную валидацию входных данных
            - Защищайтесь от XSS атак
            - Правильно обрабатывайте пользовательский ввод
            - Используйте безопасные методы рендеринга

        11. Пользовательский опыт:
            - Добавляйте состояния загрузки
            - Показывайте прогресс длительных операций
            - Обеспечивайте отзывчивый интерфейс
            - Используйте оптимистичные обновления где уместно

        12. Архитектура компонентов:
            - Создавайте переиспользуемые компоненты
            - Следуйте принципу единственной ответственности
            - Используйте композицию вместо наследования
            - Правильно организуйте структуру папок компонентов

    - path: "**/*.json"
      instructions: |
        РАБОТА С JSON ФАЙЛАМИ:

        1. Структура и форматирование:
           - Используйте правильное форматирование JSON
           - Поддерживайте консистентную структуру
           - Используйте осмысленные ключи
           - Избегайте дублирования данных

        2. Валидация:
           - Убедитесь в корректности JSON синтаксиса
           - Проверяйте типы данных
           - Валидируйте обязательные поля

        3. Безопасность:
           - Не включайте конфиденциальные данные
           - Используйте переменные окружения для секретов
           - Валидируйте входящие JSON данные

    - path: "**/package.json"
      instructions: |
        УПРАВЛЕНИЕ ЗАВИСИМОСТЯМИ:

        1. Версионирование:
           - Используйте семантическое версионирование
           - Избегайте уязвимых версий пакетов
           - Регулярно обновляйте зависимости

        2. Структура:
           - Правильно организуйте scripts
           - Разделяйте dependencies и devDependencies
           - Используйте точные версии для критических пакетов

        3. Безопасность:
           - Проверяйте пакеты на уязвимости
           - Используйте только проверенные пакеты
           - Регулярно аудируйте зависимости

    - path: "**/*.md"
      instructions: |
        ДОКУМЕНТАЦИЯ:

        1. Структура:
           - Используйте правильную иерархию заголовков
           - Создавайте четкое содержание
           - Структурируйте информацию логично

        2. Содержание:
           - Пишите ясно и понятно
           - Используйте примеры кода
           - Добавляйте ссылки на связанные ресурсы
           - Поддерживайте актуальность информации

        3. Форматирование:
           - Используйте правильный Markdown синтаксис
           - Форматируйте код блоки с указанием языка
           - Добавляйте alt текст для изображений

chat:
  auto_reply: true
