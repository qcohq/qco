---
description: 
globs: 
alwaysApply: false
---
# Contribution Guidelines

Welcome to our open-source e-commerce platform, a **flexible alternative to Shopify** designed for developers to build customizable online stores. Built with a modern tech stack—**Next.js 15**, **React 17**, **TypeScript**, **Tailwind CSS 4**, **tRPC**, **Drizzle ORM**, **Neon Postgres**, **Zod/v4**, **next-intl**, **Better Auth**, **Shadcn/ui**, **T3 Stack**, **TurboRepo**, **Bun**, and **BiomeJS**—this project prioritizes **modularity**, **maintainability**, и **community collaboration**. These guidelines ensure the codebase remains scalable and easy to extend, making it an ideal template for e-commerce projectsContevervi. [Prect-style dardsndardy Priarity-. [Devow](#d
6. [nternanationalization)
8. [Database and API](mdc:#database-and-api)
9. [Authentication](mdc:#authentication)
10. [UI Components](mdc:#ui-components)
11. [S3 Integration](mdc:#s3-integration)
12. [Monorepo Management](mdc:#monorepo-management)
13. [Submitting Contributions](mdc:#submitting-contributions)
14. [Example Contribution](mdc:#example-contribution)

---

## Project Overview
This open-source project is a **developer-friendly e-commerce platform**, offering a customizable alternative to Shopify. Key features include:
- **Storefronts** (`/apps/web`): Product catalogs, carts, and checkout flows built with Next.js 15.
- **Admin Dashboards** (`/apps/app`): Tools for managing products, orders, and customers, adaptable for web or native apps.
- **Core Functionality**: Product management, payment integrations, multi-language support, and media storage via AWS S3.
- **Extensibility**: Modular design for adding features like subscriptions, reviews, or analytics.
- **Community-Driven**: Open to contributions for new integrations, optimizations, and e-commerce enhancements.

The goal is to provide a production-ready template that developers can adopt to build tailored e-commerce solutions, with a focus on scalability, type safety, and modern practices.

---

## Project Structure
The project uses **TurboRepo** for monorepo management, following the **T3 Stack** philosophy. The structure is:

- **/apps**:
  - `/apps/web`: Next.js 15 storefront.
    - `/features`: Feature-based organization (e.g., `/features/product`, `/features/cart`) for components, hooks, and utilities.
    - `/pages`: Next.js routing (API routes in `/pages/api`).
    - `/public`: Static assets (e.g., product images).
    - `/tailwind.config.ts`: Tailwind CSS 4 configuration (if customized; otherwise, uses defaults).
  - `/apps/app`: Admin dashboard or companion app.
    - `/features`: Feature-based organization (e.g., `/features/orders`, `/features/inventory`).
- **/packages**:
  - `/packages/web-api`: tRPC routers for `/apps/web`, using **Drizzle Queries** and **Zod/v4** from `/packages/web-validators`.
  - `/packages/api`: API logic (preferably tRPC) for `/apps/app`, using **Zod/v4** from `/packages/validators`.
  - `/packages/web-auth`: **Better Auth** configurations for `/apps/web`.
  - `/packages/web-validators`: **Zod/v4** schemas for `/apps/web` and `/packages/web-api` (e.g., product, cart schemas).
  - `/packages/validators`: **Zod/v4** schemas for `/apps/app` and `/packages/api` (e.g., order, inventory schemas).
  - `/packages/ui`: Reusable **Shadcn/ui** and custom UI components (e.g., product cards).
  - `/packages/db`: **Drizzle ORM** schemas and utilities.
    - Exports: `import { desc, eq } from '@qco/db'` (query helpers), `import { client } from '@qco/db/client'` (Neon Postgres client), `import { Product, Post, users } from '@qco/db/schema'` (schemas).
  - `/packages/lib`: Utility functions, including AWS S3 operations (e.g., `uploadToS3`).
  - `/packages/i18n`: **next-intl** utilities and translations.
- **/tooling**: Configurations for **BiomeJS**, TypeScript, etc.
- **/docs**: Documentation for setup, features, and APIs.

Dependencies are managed via `bun.lockb` and `package.jsonStyle and Standards
- **TypeScript**: Strict typing, avoid `any`.
- **BiomeJS**: Run `bun lint` per `biome.json`.
- **File Naming**: Kebab-case (e.g., `product-card.tsx`, `cart-router.ts`).
- **Folder Structure**: Feature-based in `/apps/web/features` and `/apps/app/features`.
- **Commit Messages**: Use [Conventional Commits](mdc:https:/www.conventionalcommits.org) (e.g., `feat(product): add product search`, `fix(cart): resolve checkout bug`).
- **Documentation**: Update `/docs` with e-commerce examples (e.g., payment gateway integration).
- **Frontend Components**: Components on the frontend must be small and focused, each located in its own file. Avoid creating large, monolithic components—split UI into small, reusable pieces for better maintainability and scalability.
- **Forms**: Use `react-hook-form` for all forms on the frontend to ensure consistency, type safety, and better integration with validation schemas.
- **Validation Schemas**: Use the same Zod schemas on both frontend and backend. Import schemas from `/packages/web-validators` (for web) and `/packages/validators` (for app) to guarantee unified validation and type safety across the stack.
- **Server Data Preparation**: The server must prepare and return clear, frontend-ready data structures. All necessary transformations and formatting should be performed on the server, so that the frontend receives data in the exact shape it needs, with no additional field transformations required on the client.

---

## Modularity Principles
- **Feature-Based Organization**: Group code in `/features` (e.g., `/features/product` for product-related logic).
- **Single Responsibility**: Each file/module has one purpose.
- **Reusable Code**: Share UI in `/packages/ui`, S3 utilities in `/packages/lib`, database utilities in `/packages/db`.
- **Type Safety**: Use **Zod/v4** schemas from `/packages/web-validators` (web) and `/packages/validators` (app).
- **Feature Flags**: Use environment variables or `@t3-oss/env-core` for experimental features.
- **Decoupled Logic**: Keep business logic in `/packages/web-api`, `/packages/api`, or `/packages/lib`.

---

## Development Workflow
1. **Setup**:
   - Install: `bun install`.
   - Configure `.env.local` from `.env.example` (e.g., Neon Postgres, AWS S3, payment gateways).
   - Set up **Neon Postgres** via Neon’s CLI or dashboard.
   - Configure AWS S3 for `/packages/lib`.
2. **Run Locally**:
   - Start: `bun turbo run dev`.
   - Verify Neon Postgres via `/packages/db/client`.
   - Test S3 functions with mock credentials.
3. **Build**:
   - Build: `bun turbo run build`.
   - Optimize for **Next.js 15** and **React 17**.
4. **Lint and Format**:
   - Run `bun lint`.

